{"ast":null,"code":"import _regeneratorRuntime from \"/Users/popovicisilviu/Documents/Redux-React-App/ptweet/node_modules/@babel/runtime/regenerator\";\nimport _toConsumableArray from \"/Users/popovicisilviu/Documents/Redux-React-App/ptweet/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"/Users/popovicisilviu/Documents/Redux-React-App/ptweet/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/Users/popovicisilviu/Documents/Redux-React-App/ptweet/src/client-component/dashboard/Tweets.js\";\nimport React from 'react';\nimport UserCard from '../layout/UserCard';\nimport { compose, withState, withHandlers } from 'recompose';\nvar enhance = compose(withState('stars', 'updateStar', [{\n  id: 1,\n  avatar: require('../images/madison.jpg'),\n  name: 'Madison Ivy',\n  review: 'For Alex: Mmm, not bad but not good either. Huh.',\n  message: 'You still got a LONG career ahead of you! xoxo',\n  rating: Math.round(Math.random() * 100)\n}, {\n  id: 2,\n  avatar: require('../images/elsa.jpg'),\n  name: 'Elsa Jean',\n  review: 'Alex needs some more training.',\n  message: 'Ive heard you are the new hot thing on \"BBC\" News ;)',\n  rating: Math.round(Math.random() * 100)\n}, {\n  id: 3,\n  avatar: require('../images/jayden.jpg'),\n  name: 'Jayden James',\n  review: 'I got cute with him and gave him a second round.',\n  message: 'I expect your piercing personality to get to California.',\n  rating: Math.round(Math.random() * 100)\n}, {\n  id: 4,\n  avatar: require('../images/kendra.jpg'),\n  name: 'Kendra Lust',\n  review: 'I showed him what mommy knows, he can be a bad boy, ntz ntz.. Overall okaish.',\n  message: 'Mommy made new fresh cookies for you *wink* *wink*',\n  rating: Math.round(Math.random() * 100)\n}, {\n  id: 5,\n  avatar: require('../images/nicole.jpg'),\n  name: 'Nicole Aniston',\n  review: 'About Alex: Just no.',\n  message: 'Heard you are in town, wanna -meat- ?',\n  rating: Math.round(Math.random() * 100)\n}]), withState('post', 'updatedPost', ''), withHandlers({\n  handleSubmit: function handleSubmit(props) {\n    return (\n      /*#__PURE__*/\n      function () {\n        var _ref = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee(e) {\n          var response, body, newStar;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  e.preventDefault();\n                  _context.next = 3;\n                  return fetch('/', {\n                    method: 'POST',\n                    headers: {\n                      'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify(props, null, '')\n                  });\n\n                case 3:\n                  response = _context.sent;\n                  _context.next = 6;\n                  return response.text();\n\n                case 6:\n                  body = _context.sent;\n                  props.updatedPost('');\n                  newStar = {\n                    avatar: require('../images/hammer.png'),\n                    name: 'Sebi \"The Viking\"',\n                    review: 'Alex suffers from inner genital syndrome',\n                    message: body,\n                    rating: Math.round(Math.random() * 100)\n                  };\n                  props.updateStar(function (stars) {\n                    return [newStar].concat(_toConsumableArray(stars));\n                  });\n\n                case 10:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this);\n        }));\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }()\n    );\n  },\n  onChange: function onChange(_ref2) {\n    var updatedPost = _ref2.updatedPost;\n    return function (e) {\n      return updatedPost(e.target.value);\n    };\n  }\n}));\n\nvar Tweets = function Tweets(_ref3) {\n  var post = _ref3.post,\n      stars = _ref3.stars,\n      handleSubmit = _ref3.handleSubmit,\n      onChange = _ref3.onChange;\n  return React.createElement(\"div\", {\n    className: \"project-list section\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, \"Post a new Tweet:\")), React.createElement(\"input\", {\n    type: \"text\",\n    pattern: \".{3,}\",\n    required: true,\n    title: \"Write at least 3 characters!\",\n    maxLength: \"140\",\n    value: post,\n    onChange: onChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, \"Tweet!\")), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }), stars.map(function (star) {\n    return React.createElement(UserCard, {\n      key: star.id,\n      avatar: star.avatar,\n      name: star.name,\n      review: star.review,\n      message: star.message,\n      rating: star.rating,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    });\n  }));\n};\n\nexport default enhance(Tweets);","map":{"version":3,"sources":["/Users/popovicisilviu/Documents/Redux-React-App/ptweet/src/client-component/dashboard/Tweets.js"],"names":["React","UserCard","compose","withState","withHandlers","enhance","id","avatar","require","name","review","message","rating","Math","round","random","handleSubmit","props","e","preventDefault","fetch","method","headers","body","JSON","stringify","response","text","updatedPost","newStar","updateStar","stars","onChange","target","value","Tweets","post","map","star"],"mappings":"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","sourcesContent":["import React from 'react'\nimport UserCard from '../layout/UserCard'\nimport { compose, withState, withHandlers } from 'recompose'\n\nconst enhance = compose(\n  withState('stars', 'updateStar',\n    [{\n      id: 1,\n      avatar: require('../images/madison.jpg'),\n      name: 'Madison Ivy',\n      review: 'For Alex: Mmm, not bad but not good either. Huh.',\n      message: 'You still got a LONG career ahead of you! xoxo',\n      rating: Math.round(Math.random() * 100)\n    },\n    {\n      id: 2,\n      avatar: require('../images/elsa.jpg'),\n      name: 'Elsa Jean',\n      review: 'Alex needs some more training.',\n      message: 'Ive heard you are the new hot thing on \"BBC\" News ;)',\n      rating: Math.round(Math.random() * 100)\n    },\n    {\n      id: 3,\n      avatar: require('../images/jayden.jpg'),\n      name: 'Jayden James',\n      review: 'I got cute with him and gave him a second round.',\n      message: 'I expect your piercing personality to get to California.',\n      rating: Math.round(Math.random() * 100)\n    },\n    {\n      id: 4,\n      avatar: require('../images/kendra.jpg'),\n      name: 'Kendra Lust',\n      review: 'I showed him what mommy knows, he can be a bad boy, ntz ntz.. Overall okaish.',\n      message: 'Mommy made new fresh cookies for you *wink* *wink*',\n      rating: Math.round(Math.random() * 100)\n    },\n    {\n      id: 5,\n      avatar: require('../images/nicole.jpg'),\n      name: 'Nicole Aniston',\n      review: 'About Alex: Just no.',\n      message: 'Heard you are in town, wanna -meat- ?',\n      rating: Math.round(Math.random() * 100)\n    }]\n  ),\n  withState('post', 'updatedPost', ''),\n  withHandlers({\n    handleSubmit: (props) => async e => {\n      e.preventDefault()\n      const response = await fetch('/', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(props, null, '')\n      })\n      const body = await response.text()\n      props.updatedPost('')\n      var newStar = {\n        avatar: require('../images/hammer.png'),\n        name: 'Sebi \"The Viking\"',\n        review: 'Alex suffers from inner genital syndrome',\n        message: body,\n        rating: Math.round(Math.random() * 100)\n      }\n      props.updateStar(stars => [newStar, ...stars])\n    },\n    onChange: ({ updatedPost }) => e =>\n      updatedPost(e.target.value)\n  })\n)\n\nconst Tweets = ({ post, stars, handleSubmit, onChange }) => {\n  return (\n    <div className='project-list section'>\n      <form onSubmit={handleSubmit}>\n        <p>\n          <strong>Post a new Tweet:</strong>\n        </p>\n        <input\n          type='text'\n          pattern='.{3,}'\n          required title='Write at least 3 characters!'\n          maxLength='140'\n          value={post}\n          onChange={onChange}\n        />\n        <button type='submit'>Tweet!</button>\n      </form>\n      <br />\n      {stars.map((star) =>\n        <UserCard key={star.id} avatar={star.avatar} name={star.name} review={star.review} message={star.message} rating={star.rating} />\n      )}\n    </div>\n  )\n}\n\nexport default enhance(Tweets)\n"]},"metadata":{},"sourceType":"module"}