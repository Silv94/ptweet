{"ast":null,"code":"var _jsxFileName = \"/Users/popovicisilviu/Documents/Redux-React-App/marioplan/src/client-component/layout/Navbar-components/PostModal.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Modal from '@material-ui/core/Modal';\nimport Button from '@material-ui/core/Button';\nimport { compose, withState, withHandlers, withProps } from 'recompose';\n\nfunction rand() {\n  return Math.round(Math.random() * 20) - 10;\n}\n\nfunction getModalStyle() {\n  var top = 50 + rand();\n  var left = 50 + rand();\n  return {\n    top: \"\".concat(top, \"%\"),\n    left: \"\".concat(left, \"%\"),\n    transform: \"translate(-\".concat(top, \"%, -\").concat(left, \"%)\")\n  };\n}\n\nvar styles = function styles(theme) {\n  return {\n    paper: {\n      position: 'absolute',\n      width: theme.spacing.unit * 50,\n      backgroundColor: theme.palette.background.paper,\n      boxShadow: theme.shadows[5],\n      padding: theme.spacing.unit * 4\n    }\n  };\n};\n\nvar NewTweet = function NewTweet(_ref) {\n  var classes = _ref.classes,\n      title = _ref.title,\n      toggleVisibility = _ref.toggleVisibility,\n      isVisible = _ref.isVisible;\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: toggleVisibility,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, \"NewTweet\"), React.createElement(Modal, {\n    \"aria-labelledby\": \"simple-modal-title\",\n    \"aria-describedby\": \"simple-modal-description\",\n    open: isVisible,\n    onClose: toggleVisibility,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }));\n};\n\nNewTweet.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default compose(withState('isVisible', 'toggleVis', false), withHandlers({\n  toggleVisibility: function toggleVisibility(_ref2) {\n    var toggleVis = _ref2.toggleVis,\n        isVisible = _ref2.isVisible;\n    return function (event) {\n      return toggleVis(!isVisible);\n    };\n  }\n}), withProps(function (_ref3) {\n  var isVisible = _ref3.isVisible;\n  return {\n    content: isVisible ? React.createElement(\"div\", {\n      style: getModalStyle(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      variant: \"h6\",\n      id: \"modal-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, title), React.createElement(Typography, {\n      variant: \"subtitle1\",\n      id: \"simple-modal-description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, \"-space-for-message\")) : React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    })\n  };\n}))(NewTweet);","map":{"version":3,"sources":["/Users/popovicisilviu/Documents/Redux-React-App/marioplan/src/client-component/layout/Navbar-components/PostModal.js"],"names":["React","PropTypes","withStyles","Typography","Modal","Button","compose","withState","withHandlers","withProps","rand","Math","round","random","getModalStyle","top","left","transform","styles","theme","paper","position","width","spacing","unit","backgroundColor","palette","background","boxShadow","shadows","padding","NewTweet","classes","title","toggleVisibility","isVisible","propTypes","object","isRequired","toggleVis","event","content"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Modal from '@material-ui/core/Modal';\nimport Button from '@material-ui/core/Button';\nimport { compose, withState, withHandlers, withProps } from 'recompose'\n\nfunction rand() {\n  return Math.round(Math.random() * 20) - 10;\n}\n\nfunction getModalStyle() {\n  const top = 50 + rand();\n  const left = 50 + rand();\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nconst styles = theme => ({\n  paper: {\n    position: 'absolute',\n    width: theme.spacing.unit * 50,\n    backgroundColor: theme.palette.background.paper,\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing.unit * 4,\n  },\n});\n\nconst NewTweet = ({ classes, title, toggleVisibility, isVisible }) => {\n  return (\n    <div>\n      <Button onClick={toggleVisibility}>NewTweet</Button>\n      <Modal\n        aria-labelledby=\"simple-modal-title\"\n        aria-describedby=\"simple-modal-description\"\n        open={isVisible}\n        onClose={toggleVisibility}\n      >\n      </Modal>\n    </div>\n  )\n}\n\nNewTweet.propTypes = {\n    classes: PropTypes.object.isRequired,\n  };\n\nexport default compose (\n    withState('isVisible', 'toggleVis', false),\n    withHandlers({\n        toggleVisibility: ({toggleVis, isVisible}) => {\n            return (event) => {\n                return toggleVis(!isVisible)\n            }\n        }\n    }),\n    withProps(({ isVisible }) => {\n        return {\n           content: isVisible ? \n                <div style={getModalStyle()}>\n                  <Typography variant=\"h6\" id=\"modal-title\">\n                  {title}\n                  </Typography>\n                  <Typography variant=\"subtitle1\" id=\"simple-modal-description\">\n                  -space-for-message\n                  </Typography>\n                </div> \n                : <p></p>\n              \n        }\n    })\n)(NewTweet)"]},"metadata":{},"sourceType":"module"}